{
    "pages": [
        {
            "id": "1",
            "ordinal": 1,
            "title": "Exercise 1: Learn and Play",
            "description": "<p>Welcome to your first exercise!</p><p>Before we start building anything, it's important to understand how the game works. In this step, you'll <strong>play the Snake game</strong> and observe its behavior.</p><p>Think like a game designer or detective:<ul><li>What rules control the game?</li><li>What happens when the snake eats something?</li><li>How does the snake move?</li><li>What causes the game to end?</ul></p><p>Use the <strong>text field below</strong> to write down all the rules and patterns you notice. There are no wrong answers - this is about observation and curiosity.</p><p>Once you're done, click the <strong>Save</strong> button to continue to the next exercise, where we'll start designing and tweaking the game together!</p>",
            "sandboxPlaceholder": "Here are a few ideas for the game rules:\nThe snake moves in the chosen direction\nFood items spawn at random locations\n…",
            "shouldOpen": ["2"]
        },
        {
            "id": "2",
            "ordinal": 2,
            "title": "Exercise 2: Design Your Own Level",
            "description": "<p>Awesome! Now that you understand the game rules, it's time to shape the game world yourself.</p><p>In this exercise, you'll define a custom <strong>obstacle layout</strong> using a simple text configuration format. This layout will determine where the snake can move - and where it can't!</p><p>Use the following format for your configuration:</p><pre>&lt;number of rows&gt;,&lt;number of columns&gt;<br>&lt;symbol for empty cells&gt;,&lt;symbol for obstacles&gt;<br>&lt;map layout with obstacles&gt;</pre> <p><strong>Example:</strong></p> <pre>10,10<br>0,X<br>0000000000<br>00X0000000<br>0000000000<br>0000XXX000<br>0000000000<br>00X0000000<br>0000000000<br>0000000000<br>0000000000<br>0000000000</pre><p><strong>Legend:</strong></p> <ul> <li><code>0</code> = empty space (the snake can move here)</li> <li><code>X</code> = obstacle (the snake cannot move here)</li> </ul> <p><strong>Make sure:</strong></p> <ul> <li>The number of rows and columns matches your actual map layout.</li> <li>Every row contains exactly the number of columns you specified.</li> <li>You experiment with different obstacle placements to create fun or tricky paths!</li> </ul> <p>When you're done, click <strong>Save</strong> to try it out and continue to the next part.</p><p>P.S. If the game didn't load your configuration, try clicking the <strong>Restart</strong> button.</p>",
            "sandboxPlaceholder": "20,15\n0,X\n000000000000000\n000000000000000\n00XXXX00000XXXX\n000000000000000\n000000X00000000\n000000X00000000\n000000X00000000\n000000XXXXX0000\n000000000000000\n000X00000000X00\n000X00000000X00\n000XXXXX0000X00\n000000000000X00\n000000000000000\nXXXXX0000000000\n000000000000000\n000000000000000\n00XXX000000XXX0\n000000000000000\n000000000000000",
            "shouldOpen": ["3"]
        },
        {
            "id": "3",
            "ordinal": 3,
            "title": "Exercise 3: Manual maze solver",
            "description": "<p>In this exercise, you're going to take direct control of the snake and guide it through the obstacle-filled field to reach the food!</p> <p>This time, the game is in <strong>manual advancement mode</strong> - it won’t play automatically. Instead, you will issue a series of commands and then step through each move one at a time.</p> <p><strong>How it works:</strong></p> <ul> <li>Use the <code>left</code>, <code>right</code>, <code>up</code>, and <code>down</code> commands and optional repeat counter to create your movement plan.</li> <li>Each command corresponds to one movement by the snake.</li> <li>If your command list is shorter than the number of required steps, the snake will continue repeating the <strong>last entered command</strong>.</li> <li>Click the <strong>\"Step\"</strong> button to move the snake one step forward.</li> <li>You can also use the <strong>\"Advance Automatically\"</strong> button to let the game play out the rest of your command sequence.</li> </ul> <p><strong>Goal:</strong> Reach the food item without crashing into any obstacles!</p> <p><strong>Example:</strong></p> <pre>down<br/>right 2<br/>down 2</pre> <p>Take your time and help the snake to reach the food item. When the snake reaches the food, you'll complete the exercise and be ready to proceed next!</p>",
            "sandboxPlaceholder": "left\nup\nup\ndown\n…",
            "shouldOpen": ["4"]
        },
        {
            "id": "4",
            "ordinal": 4,
            "title": "Exercise 4: Write Your First Snake Controller",
            "description": "<p>Now it's time to start thinking like a game AI! In this exercise, you'll write the logic that controls how the snake moves on its own.</p> <p>You're provided with a function called <code>MoveSnake</code>, and it's your job to implement it. This function takes in two arguments:</p> <ul> <li><code>snakeHead</code>: the current position of the snake’s head, e.g. <code>[row, column]</code></li> <li><code>food</code>: the position of the food on the grid, also a <code>[row, column]</code> tuple</li> </ul> <p><strong>Your task:</strong> Return a string indicating the next direction the snake should move - <code>left</code>, <code>right</code>, <code>top</code>, or <code>bottom</code>.</p> <p>There are no obstacles on the field in this exercise, so you can focus purely on chasing the food. However, the snake will grow as it eats, and in some cases it might accidentally collide with its own body. That's okay! For now, we're not handling self-collision logic - we'll cover that in the next exercise.</p> <p><strong>Important:</strong></p> <ul> <li>You can use basic arithmetic and <code>if</code>/<code>else</code> logic inside the <code>MoveSnake</code> function.</li> <li>If the snake crashes into itself, feel free to restart the game - but don't forget to click <strong>\"Save\"</strong> first to preserve your code!</li> </ul> <p><strong>Goal:</strong> Write a <code>MoveSnake</code> function that can score <strong>50 points or more</strong> by reaching the food repeatedly.</p> <p>Good luck, and have fun teaching your snake how to hunt!</p>",
            "sandboxPlaceholder": "function MoveSnake(snakePosition, foodPosition) {\n    …\n}\n",
            "shouldOpen": []
        },
        {
            "id": "5",
            "ordinal": 5,
            "title": "Exercise 4",
            "description": "Hello world",
            "shouldOpen": []
        }
    ],
    "openByDefault": ["1"]
}
